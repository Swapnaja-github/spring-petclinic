name: Java CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: |
          chmod +x mvnw
          ./mvnw -B package --file pom.xml

      # Step 4: Run Unit Tests
      - name: Run Unit Tests
        run: ./mvnw test

      # Step 5: Copy artifact to staging directory
      - name: Copy artifact to staging directory
        run: mkdir staging && cp target/*.jar staging

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://51.92.90.162:9000/"
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=first_sonarqube_project -Dsonar.projectName='first_sonarqube_project'

      - name: Debug SonarQube Variables
        run: |
          echo "SONAR_HOST_URL is: $SONAR_HOST_URL"
          echo "SONAR_TOKEN is: [REDACTED]"

      # Step 7: Publish Artifacts
      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy  # Ensures deployment only happens after the build job

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: staging

  # #    - name: Set up SSH Key
  #       run: |
  #         echo "${{ secrets.AWS_KEP_PEM }}" > swap_key_spain2.pem
  #         chmod 600 swap_key_spain2.pem

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.AWS_PEM_KEY }}

      # Step 5: Copy artifact to EC2 instance
      - name: Copy artifact to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i swap_key_spain2.pem staging/*.jar ubuntu@51.92.90.162:/home/ubuntu/app


      # Step 6: SSH into EC2 and start the application
      # - name: SSH into EC2 and start application
      #   run: |
      #     ssh -i swap_key_spain2.pem ubuntu@51.92.90.162 <<EOF
      #     cd /home/ubuntu/app
      #     java -jar spring-petclinic-*.jar
      #     EOF

      # - name: Start Spring PetClinic
      #   run: ssh -o StrictHostKeyChecking=no ubuntu@51.92.90.162 "nohup java -jar /home/ubuntu/app/spring-petclinic-*.jar &"


      - name: Start Spring PetClinic
        run: ssh -o StrictHostKeyChecking=no ubuntu@51.92.90.162 \
          "nohup java -jar /home/ubuntu/app/spring-petclinic-*.jar > /dev/null 2>&1 &"
